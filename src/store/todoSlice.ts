import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Todo } from '../types/Todo';

// Define the state shape for our todos
interface TodoState {
  todos: Todo[];
  isLoading: boolean;
  error: string | null;
}

// Initial state - empty todos array
const initialState: TodoState = {
  todos: [],
  isLoading: false,
  error: null,
};

// Create the todo slice using Redux Toolkit
// This automatically generates action creators and action types
const todoSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {
    // Set all todos at once (useful when loading from storage)
    setTodos: (state, action: PayloadAction<Todo[]>) => {
      state.todos = action.payload;
      state.error = null;
    },

    // Add a new todo
    addTodo: (state, action: PayloadAction<{ text: string }>) => {
      const newTodo: Todo = {
        id: Date.now().toString(),
        text: action.payload.text,
        completed: false,
        createdAt: new Date(),
      };
      state.todos.push(newTodo);
      state.error = null;
    },

    // Update an existing todo
    updateTodo: (state, action: PayloadAction<{ id: string; text: string }>) => {
      const todoIndex = state.todos.findIndex(todo => todo.id === action.payload.id);
      if (todoIndex !== -1) {
        state.todos[todoIndex].text = action.payload.text;
        state.error = null;
      }
    },

    // Toggle todo completion status
    toggleTodo: (state, action: PayloadAction<string>) => {
      const todoIndex = state.todos.findIndex(todo => todo.id === action.payload);
      if (todoIndex !== -1) {
        state.todos[todoIndex].completed = !state.todos[todoIndex].completed;
        state.error = null;
      }
    },

    // Delete a todo
    deleteTodo: (state, action: PayloadAction<string>) => {
      state.todos = state.todos.filter(todo => todo.id !== action.payload);
      state.error = null;
    },

    // Set loading state
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload;
    },

    // Set error state
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

// Export action creators - these are automatically generated by createSlice
export const {
  setTodos,
  addTodo,
  updateTodo,
  toggleTodo,
  deleteTodo,
  setLoading,
  setError,
} = todoSlice.actions;

// Export the reducer to be used in the store
export default todoSlice.reducer;
